@page "/login"

@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<div class="container pa-4">
    <div class="row">
        <div class="col-sm"></div>
        <div class="col-sm">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Login</h5>
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <MudTextField Label="Username" @bind-Value="model.Username" Class="form-control" For="@(() => model.Username)"/>
                        </div>
                        <div class="form-group">
                            <MudTextField Label="Password" @bind-Value="model.Password" InputType="@passwordInputType" Class="form-control" For="@(() => model.Password)" Adornment="Adornment.End" AdornmentIcon="@passwordInputIcon" OnAdornmentClick="ToggleRevealPassword" />
                        </div>
                        <div class="pa-2">
                            <MudButton Disabled="@loading" Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Submit" >
                                @if (loading) 
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Login
                            </MudButton>
                            <MudButton Href="/register">Register</MudButton>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="col-sm"></div>
    </div>
</div>


@code {
    private LoginDTO model = new LoginDTO();
    private bool loading;

    private bool isPasswordVisible;
    private InputType passwordInputType = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            var result = await AuthService.Login(model);
            if (result != null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                loading = false;
                Snackbar.Add("Bad credentials", Severity.Error);
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            loading = false;
            Snackbar.Add(ex.Message, Severity.Error);
            StateHasChanged();
        }
    }

    void ToggleRevealPassword()
    {
        @if (isPasswordVisible)
        {
            isPasswordVisible = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInputType = InputType.Password;
        }
        else {
            isPasswordVisible = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInputType = InputType.Text;
        }
    }
}
